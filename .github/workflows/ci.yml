name: My Robot CI (Fully Optimized with Permission Fix)

on:
  pull_request:
    branches: [ main ]

jobs:
  build-lint-test:
    name: Build, Lint and Test
    runs-on: ubuntu-22.04
    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 3. Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 4. Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 5. Cache ROS dependencies
        uses: actions/cache@v4
        with:
          path: |
            /var/lib/apt/lists
            /var/cache/apt/archives
            ~/.ros/rosdep
          key: ${{ runner.os }}-ros-humble-${{ hashFiles('**/package.xml') }}
          restore-keys: |
            ${{ runner.os }}-ros-humble-

      - name: 6. Set up ROS 2 Humble and Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common curl
          sudo add-apt-repository universe
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt-get update
          
          # ▼▼▼▼▼ 이 줄이 핵심입니다! colcon을 포함한 개발 도구를 설치합니다. ▼▼▼▼▼
          sudo apt-get install -y ros-dev-tools xvfb
          # ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲

          sudo rosdep init || true
          rosdep update
          rosdep install --from-paths src --ignore-src -y -r --rosdistro humble
      - name: 7. Start virtual display
        run: Xvfb :99 -screen 0 1024x768x16 &
      - name: 8. Fix Cache Permissions
        run: |
          sudo chown -R runner:runner /var/lib/apt/lists /var/cache/apt/archives ~/.ros/rosdep

      # ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼ 이 스텝이 수정되었습니다 ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
      # ▼▼▼▼▼▼▼▼▼▼ 기존 9번, 10번 스텝을 아래 내용으로 교체합니다 ▼▼▼▼▼▼▼▼▼▼

      # 9. 빌드, 린트 및 테스트 실행
      - name: 9. Build, Lint and Test with colcon
        env:
          DISPLAY: ":99"
        run: |
          source /opt/ros/humble/setup.bash && \
          find src -name "*.py" -print0 | xargs -0 pylint --rcfile=./.pylintrc || true && \
          colcon build --packages-select my_robot_pkg && \
          source install/setup.bash && \
          
          # colcon test 실행. || true를 붙여서 테스트가 실패해도 워크플로우가 중단되지 않게 함
          # --pytest-args 로 결과를 junit.xml 파일로 저장
          colcon test --packages-select my_robot_pkg \
            --event-handlers console_direct+ \
            --pytest-args "--junitxml=build/my_robot_pkg/pytest.xml" || true

      # 10. 한글 테스트 결과 보고서 생성 및 업로드
      - name: 10. Generate and Upload Report
        # if: always()를 통해 앞선 스텝의 성공/실패 여부와 관계없이 항상 실행
        if: always()
        run: |
          echo "## 🤖 CI 테스트 결과 보고서" > report.md
          echo "" >> report.md
          
          # pytest.xml 파일이 존재하는지 확인
          if [ -f "build/my_robot_pkg/pytest.xml" ]; then
            # pytest-junit-to-markdown 도구를 설치 (없을 경우)
            pip install pytest-junit-to-markdown
            
            # XML 결과를 마크다운(한글)으로 변환
            junit-xml-to-md build/my_robot_pkg/pytest.xml >> report.md
            
            echo "" >> report.md
            echo "---" >> report.md
            echo "### 📋 상세 로그" >> report.md
            echo "아래 'Artifacts' 섹션에서 'test-logs'를 다운로드하여 전체 로그를 확인하세요." >> report.md
          else
            echo "테스트 결과 파일(pytest.xml)을 찾을 수 없습니다." >> report.md
            echo "테스트 실행 단계에서 오류가 발생했을 수 있습니다." >> report.md
          fi
          
          # 생성된 보고서를 GitHub Actions의 요약(Summary) 페이지에 표시
          cat report.md >> $GITHUB_STEP_SUMMARY

      # 11. 전체 로그 및 보고서 아티팩트로 업로드
      - name: 11. Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-and-report
          path: |
            build/
            install/
            log/
            report.md # 생성된 한글 보고서도 함께 업로드
